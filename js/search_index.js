var search_data = {"index":{"searchIndex":["freeimage","abstractsource","decoder","encoder","bitmap","boolean","complex","conversions","error","ffi","platform","file","icc","profile","io","iostruct","infoheader","information","memory","memorystream","modify","palette","pixels","rgb16","rgb16bf565","rgba16","rgbaf","rgbf","rgbquad","rgbtriple","scanline","transforms","==()","==()","[]()","[]()","background_color()","background_color=()","bits()","bits_per_pixel()","blue_mask()","bpp()","bytes()","bytesize()","check_last_error()","clone()","color_type()","color_types()","colors_used()","composite()","composite_with_color()","convert_to_16bits_555()","convert_to_16bits_565()","convert_to_24bits()","convert_to_32bits()","convert_to_4bits()","convert_to_8bits()","convert_to_greyscale()","convert_to_standard_type()","convert_to_type()","copy()","copyright()","count()","create()","create()","create()","dib_size()","dither()","dithers()","dots_per_meter_x()","dots_per_meter_x=()","dots_per_meter_y()","dots_per_meter_y=()","each()","each()","enlarge_canvas()","eql?()","eql?()","fill_background!()","filters()","find_lib()","flip_horizontal!()","flip_vertical!()","format()","format()","format()","formats()","free_image_library_paths()","from_native()","green_mask()","has_background_color()","has_pixels()","has_rgb_masks()","height()","icc_profile()","icc_profile=()","icc_supported?()","image_type()","image_types()","info_header()","line()","little_endian?()","make_thumbnail()","msvc?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","open()","palette()","paste!()","pitch()","pixel_color()","pixel_index()","pixelsize()","red_mask()","release()","rescale()","rotate()","rotate_ex()","save()","save()","save()","save()","scanline()","search_paths()","set_pixel_color()","set_pixel_index()","size()","threshold()","to_native()","to_s()","to_s()","transparency_count()","transparent()","transparent=()","transparent_index()","transparent_index=()","version()","width()","history","license","readme","cookbook"],"longSearchIndex":["freeimage","freeimage::abstractsource","freeimage::abstractsource::decoder","freeimage::abstractsource::encoder","freeimage::bitmap","freeimage::boolean","freeimage::complex","freeimage::conversions","freeimage::error","freeimage::ffi","freeimage::ffi::platform","freeimage::file","freeimage::icc","freeimage::icc::profile","freeimage::io","freeimage::iostruct","freeimage::infoheader","freeimage::information","freeimage::memory","freeimage::memorystream","freeimage::modify","freeimage::palette","freeimage::pixels","freeimage::rgb16","freeimage::rgb16bf565","freeimage::rgba16","freeimage::rgbaf","freeimage::rgbf","freeimage::rgbquad","freeimage::rgbtriple","freeimage::scanline","freeimage::transforms","freeimage::rgbquad#==()","freeimage::rgbtriple#==()","freeimage::palette#[]()","freeimage::scanline#[]()","freeimage::information#background_color()","freeimage::information#background_color=()","freeimage::pixels#bits()","freeimage::information#bits_per_pixel()","freeimage::information#blue_mask()","freeimage::information#bpp()","freeimage::memorystream#bytes()","freeimage::scanline#bytesize()","freeimage::check_last_error()","freeimage::bitmap#clone()","freeimage::information#color_type()","freeimage#color_types()","freeimage::palette#colors_used()","freeimage::modify#composite()","freeimage::modify#composite_with_color()","freeimage::conversions#convert_to_16bits_555()","freeimage::conversions#convert_to_16bits_565()","freeimage::conversions#convert_to_24bits()","freeimage::conversions#convert_to_32bits()","freeimage::conversions#convert_to_4bits()","freeimage::conversions#convert_to_8bits()","freeimage::conversions#convert_to_greyscale()","freeimage::conversions#convert_to_standard_type()","freeimage::conversions#convert_to_type()","freeimage::modify#copy()","freeimage::copyright()","freeimage::memorystream#count()","freeimage::bitmap::create()","freeimage::rgbquad::create()","freeimage::rgbtriple::create()","freeimage::information#dib_size()","freeimage::conversions#dither()","freeimage#dithers()","freeimage::information#dots_per_meter_x()","freeimage::information#dots_per_meter_x=()","freeimage::information#dots_per_meter_y()","freeimage::information#dots_per_meter_y=()","freeimage::palette#each()","freeimage::scanline#each()","freeimage::modify#enlarge_canvas()","freeimage::rgbquad#eql?()","freeimage::rgbtriple#eql?()","freeimage::modify#fill_background!()","freeimage#filters()","freeimage::find_lib()","freeimage::transforms#flip_horizontal!()","freeimage::transforms#flip_vertical!()","freeimage::file#format()","freeimage::io#format()","freeimage::memory#format()","freeimage#formats()","freeimage::free_image_library_paths()","freeimage::boolean::from_native()","freeimage::information#green_mask()","freeimage::information#has_background_color()","freeimage::information#has_pixels()","freeimage::information#has_rgb_masks()","freeimage::information#height()","freeimage::icc#icc_profile()","freeimage::icc#icc_profile=()","freeimage::icc#icc_supported?()","freeimage::information#image_type()","freeimage#image_types()","freeimage::information#info_header()","freeimage::information#line()","freeimage::little_endian?()","freeimage::modify#make_thumbnail()","freeimage::msvc?()","freeimage::bitmap::new()","freeimage::bitmap::new()","freeimage::error::new()","freeimage::file::new()","freeimage::io::new()","freeimage::memory::new()","freeimage::memorystream::new()","freeimage::palette::new()","freeimage::scanline::new()","freeimage::bitmap::open()","freeimage::information#palette()","freeimage::modify#paste!()","freeimage::information#pitch()","freeimage::pixels#pixel_color()","freeimage::pixels#pixel_index()","freeimage::scanline#pixelsize()","freeimage::information#red_mask()","freeimage::memorystream::release()","freeimage::modify#rescale()","freeimage::transforms#rotate()","freeimage::transforms#rotate_ex()","freeimage::bitmap#save()","freeimage::file#save()","freeimage::io#save()","freeimage::memory#save()","freeimage::pixels#scanline()","freeimage::search_paths()","freeimage::pixels#set_pixel_color()","freeimage::pixels#set_pixel_index()","freeimage::palette#size()","freeimage::conversions#threshold()","freeimage::boolean::to_native()","freeimage::rgbquad#to_s()","freeimage::rgbtriple#to_s()","freeimage::information#transparency_count()","freeimage::information#transparent()","freeimage::information#transparent=()","freeimage::information#transparent_index()","freeimage::information#transparent_index=()","freeimage::version()","freeimage::information#width()","","","",""],"info":[["FreeImage","","FreeImage.html","",""],["FreeImage::AbstractSource","","FreeImage/AbstractSource.html","","<p>Summary\n<p>FreeImage can load images from a variety of files, memory or streams.  For\nadditional details …\n"],["FreeImage::AbstractSource::Decoder","","FreeImage/AbstractSource/Decoder.html","","<p>The Decoder module defines various constants that control how various image\nformats are loaded.\n"],["FreeImage::AbstractSource::Encoder","","FreeImage/AbstractSource/Encoder.html","","<p>The Encoder module defines various constants that control how various image\nformats are saved.\n"],["FreeImage::Bitmap","","FreeImage/Bitmap.html","","<p>Summary\n<p>Represents an image that has been loaded into memory.  Once the image is\nloaded, you can get  …\n"],["FreeImage::Boolean","","FreeImage/Boolean.html","",""],["FreeImage::Complex","","FreeImage/Complex.html","","<p>Structure for COMPLEX type (complex number) images\n"],["FreeImage::Conversions","","FreeImage/Conversions.html","",""],["FreeImage::Error","","FreeImage/Error.html","",""],["FreeImage::FFI","","FreeImage/FFI.html","",""],["FreeImage::FFI::Platform","","FreeImage/FFI/Platform.html","",""],["FreeImage::File","","FreeImage/File.html","","<p>Summary\n<p>Supports loading and saving images to a file.\n<p>Usage\n"],["FreeImage::ICC","","FreeImage/ICC.html","",""],["FreeImage::ICC::Profile","","FreeImage/ICC/Profile.html","",""],["FreeImage::IO","","FreeImage/IO.html","","<p>Summary\n<p>Supports loading and saving images to a Ruby IO stream.\n<p>Usage\n"],["FreeImage::IOStruct","","FreeImage/IOStruct.html","",""],["FreeImage::InfoHeader","","FreeImage/InfoHeader.html","","<p># Structure for BITMAPINFOHEADER\n\n<pre>DWORD biSize;\nLONG  biWidth; \nLONG  biHeight; \nWORD  biPlanes; \nWORD ...</pre>\n"],["FreeImage::Information","","FreeImage/Information.html","","<p>Once a bitmap is loaded into memory, you can use the following methods to\nretrieve information about …\n"],["FreeImage::Memory","","FreeImage/Memory.html","","<p>Summary\n<p>Supports loading and saving images to a Ruby string.\n<p>Usage\n"],["FreeImage::MemoryStream","","FreeImage/MemoryStream.html","","<p>Wrapper for a FreeImage memory stream which allows images to be read and\nwritten to memory.  Memory streams …\n"],["FreeImage::Modify","","FreeImage/Modify.html","","<p>The Modify module provides methods that can copy, paste, composite, and\nenlarge images.  It also allows …\n"],["FreeImage::Palette","","FreeImage/Palette.html","","<p>Represents a bitmaps palette. If the bitmap doesn’t have a palette (i.e.\nwhen its pixel bit depth is …\n"],["FreeImage::Pixels","","FreeImage/Pixels.html","","<p>Summary\n<p>The Pixel module provides methods that allow you to read, write and work\npixel-by-pixel with image …\n"],["FreeImage::RGB16","","FreeImage/RGB16.html","","<p>Used to specify a color for a :rgb16 image type.\n"],["FreeImage::RGB16BF565","","FreeImage/RGB16BF565.html","",""],["FreeImage::RGBA16","","FreeImage/RGBA16.html","","<p>Used to specify a color for a :rgb16a image type.\n"],["FreeImage::RGBAF","","FreeImage/RGBAF.html","","<p>Used to specify a color for a :rgbaf image type.\n"],["FreeImage::RGBF","","FreeImage/RGBF.html","","<p>Used to specify a color for a :rgbf image type.\n"],["FreeImage::RGBQuad","","FreeImage/RGBQuad.html","","<p>Used to specify a color for a :bitmap image type.\n"],["FreeImage::RGBTriple","","FreeImage/RGBTriple.html","",""],["FreeImage::Scanline","","FreeImage/Scanline.html","","<p>Summary\n<p>Scanlines provide low level access to image data. The only lower-level\naccess is working with …\n"],["FreeImage::Transforms","","FreeImage/Transforms.html","",""],["==","FreeImage::RGBQuad","FreeImage/RGBQuad.html#method-i-3D-3D","(other)",""],["==","FreeImage::RGBTriple","FreeImage/RGBTriple.html#method-i-3D-3D","(other)",""],["[]","FreeImage::Palette","FreeImage/Palette.html#method-i-5B-5D","(index)","<p>Returns the index color as an instance of FreeImage::RGBQuad\n"],["[]","FreeImage::Scanline","FreeImage/Scanline.html#method-i-5B-5D","(index)","<p>Returns the appropriate color object for the image type and bit depth.  See\nnotes for the FreeImage::Scanline …\n"],["background_color","FreeImage::Information","FreeImage/Information.html#method-i-background_color","()","<p>Returns the background color of a bitmap. For 8-bit images, the color index\nin the palette is returned …\n"],["background_color=","FreeImage::Information","FreeImage/Information.html#method-i-background_color-3D","(value)","<p>Set the  background color of a bitmap. The color should be an instance of\nRGBQuad.\n<p>When saving an image …\n"],["bits","FreeImage::Pixels","FreeImage/Pixels.html#method-i-bits","()","<p>Returns the data-bits of the bitmap. It is up to you to interpret these\nbytes correctly, according to …\n"],["bits_per_pixel","FreeImage::Information","FreeImage/Information.html#method-i-bits_per_pixel","()","<p>Returns the size of one pixel in the bitmap in bits. For example if each\npixel takes 32-bits of space …\n"],["blue_mask","FreeImage::Information","FreeImage/Information.html#method-i-blue_mask","()","<p>Returns a bit pattern describing the blue color component of a pixel in a\nbitmap.\n"],["bpp","FreeImage::Information","FreeImage/Information.html#method-i-bpp","()",""],["bytes","FreeImage::MemoryStream","FreeImage/MemoryStream.html#method-i-bytes","()","<p>Returns the bytes of the memory stream.\n"],["bytesize","FreeImage::Scanline","FreeImage/Scanline.html#method-i-bytesize","()","<p>The width of the image in bytes.  Same as FreeImage::Bitmap#pitch.\n"],["check_last_error","FreeImage","FreeImage.html#method-c-check_last_error","()",""],["clone","FreeImage::Bitmap","FreeImage/Bitmap.html#method-i-clone","(&block)","<p>Creates an exact copy of the current image.\n<p>If an optional block is provided, it will be passed the new …\n"],["color_type","FreeImage::Information","FreeImage/Information.html#method-i-color_type","()",""],["color_types","FreeImage","FreeImage.html#method-i-color_types","","<p>FreeImage supports the following color types:\n<p>:minis_black &mdash; Monochrome bitmap (1-bit) -&gt; first palette …\n"],["colors_used","FreeImage::Palette","FreeImage/Palette.html#method-i-colors_used","()",""],["composite","FreeImage::Modify","FreeImage/Modify.html#method-i-composite","(background_bitmap, &block)","<p>Composites a transparent foreground image against a background image. The\nequation for computing a composited …\n"],["composite_with_color","FreeImage::Modify","FreeImage/Modify.html#method-i-composite_with_color","(background_color, &block)","<p>Composites a transparent foreground image against a background color. The\nequation for computing a composited …\n"],["convert_to_16bits_555","FreeImage::Conversions","FreeImage/Conversions.html#method-i-convert_to_16bits_555","(&block)","<p>Converts a bitmap to 16 bits, where each pixel has a color pattern of 5\nbits red, 5 bits green and 5 …\n"],["convert_to_16bits_565","FreeImage::Conversions","FreeImage/Conversions.html#method-i-convert_to_16bits_565","(&block)","<p>Converts a bitmap to 16 bits, where each pixel has a color pattern of 5\nbits red, 6 bits green and 5 …\n"],["convert_to_24bits","FreeImage::Conversions","FreeImage/Conversions.html#method-i-convert_to_24bits","(&block)","<p>Converts a bitmap to 24 bits. For 48-bit RGB images, conversion is done by\ndividing each 16-bit channel …\n"],["convert_to_32bits","FreeImage::Conversions","FreeImage/Conversions.html#method-i-convert_to_32bits","(&block)","<p>Converts a bitmap to 32 bits. For 48-bit RGB images, conversion is done by\ndividing each 16-bit channel …\n"],["convert_to_4bits","FreeImage::Conversions","FreeImage/Conversions.html#method-i-convert_to_4bits","(&block)","<p>Converts a bitmap to 4 bits. If the bitmap is a high-color (16, 24 or\n32-bit), monochrome or greyscale …\n"],["convert_to_8bits","FreeImage::Conversions","FreeImage/Conversions.html#method-i-convert_to_8bits","(&block)","<p>Converts a bitmap to 8 bits. If the bitmap is a high-color (16, 24 or\n32-bit), monochrome or greyscale …\n"],["convert_to_greyscale","FreeImage::Conversions","FreeImage/Conversions.html#method-i-convert_to_greyscale","(&block)","<p>Converts a bitmap to a 8-bit greyscale image with a linear ramp. Contrary\nto the FreeImage::Conversions#convert_to_8bits …\n"],["convert_to_standard_type","FreeImage::Conversions","FreeImage/Conversions.html#method-i-convert_to_standard_type","(scale_linear = true, &block)","<p>Converts a non standard image whose color type is :minis_black to a\nstandard 8-bit greyscale image.  …\n"],["convert_to_type","FreeImage::Conversions","FreeImage/Conversions.html#method-i-convert_to_type","(dst_image_type, scale_linear = true, &block)","<p>Converts a bitmap to the specified destination image type.  When the\nimage_type is equal to :bitmap, …\n"],["copy","FreeImage::Modify","FreeImage/Modify.html#method-i-copy","(left, top, right, bottom, &block)","<p>Copy a subpart of the current image. The rectangle defined by the left,\ntop, right, bottom parameters …\n"],["copyright","FreeImage","FreeImage.html#method-c-copyright","()","<p>Returns a standard copyright message you can show in your program.\n"],["count","FreeImage::MemoryStream","FreeImage/MemoryStream.html#method-i-count","()","<p>Returns the size of the memory stream.\n"],["create","FreeImage::Bitmap","FreeImage/Bitmap.html#method-c-create","(width, height, bits_per_pixel, red_mask = 0, green_mask = 0, blue_mask = 0)","<p>Creates a new image with the specified width, height and bits per pixel.\n<p>Parameters\n<p>width &mdash; The width of …\n"],["create","FreeImage::RGBQuad","FreeImage/RGBQuad.html#method-c-create","(red, green, blue, reserved = 0)","<p>Creates a new RGBQuad color\n<p>Parameters\n<p>red &mdash; Value for red, should be between 0 and 255\n"],["create","FreeImage::RGBTriple","FreeImage/RGBTriple.html#method-c-create","(red, green, blue)","<p>Creates a new RGBTriple color\n<p>Parameters\n<p>red &mdash; Value for red, should be between 0 and 255\n"],["dib_size","FreeImage::Information","FreeImage/Information.html#method-i-dib_size","()","<p>Returns the size of the DIB-element of a bitmap in memory, which is the\nheader size + palette size + …\n"],["dither","FreeImage::Conversions","FreeImage/Conversions.html#method-i-dither","(algorithm, &block)","<p>Converts a bitmap to 1-bit monochrome bitmap using the specified dithering\nalgorithm. For 1-bit input …\n"],["dithers","FreeImage","FreeImage.html#method-i-dithers","","<p>FreeImage supports the following dithering algorithms:\n<p>:fs &mdash; Floyd &amp; Steinberg error diffusion algorithm …\n"],["dots_per_meter_x","FreeImage::Information","FreeImage/Information.html#method-i-dots_per_meter_x","()","<p>Returns the horizontal resolution, in pixels-per-meter, of the target\ndevice for the bitmap.\n"],["dots_per_meter_x=","FreeImage::Information","FreeImage/Information.html#method-i-dots_per_meter_x-3D","(value)","<p>Sets the horizontal resolution, in pixels-per-meter, of the target device\nfor the bitmap.\n"],["dots_per_meter_y","FreeImage::Information","FreeImage/Information.html#method-i-dots_per_meter_y","()","<p>Returns the vertical resolution, in pixels-per-meter, of the target device\nfor the bitmap.\n"],["dots_per_meter_y=","FreeImage::Information","FreeImage/Information.html#method-i-dots_per_meter_y-3D","(value)","<p>Sets the vertical resolution, in pixels-per-meter, of the target device for\nthe bitmap.\n"],["each","FreeImage::Palette","FreeImage/Palette.html#method-i-each","()",""],["each","FreeImage::Scanline","FreeImage/Scanline.html#method-i-each","()","<p>Iterate over each pixel, returning the appropriate object to manipulate the\nunderlying data.\n"],["enlarge_canvas","FreeImage::Modify","FreeImage/Modify.html#method-i-enlarge_canvas","(left, top, right, bottom, color, options = 0, &block)","<p>Enlarges or shrinks an image selectively per side and fills newly added\nareas with the specified background …\n"],["eql?","FreeImage::RGBQuad","FreeImage/RGBQuad.html#method-i-eql-3F","(other)",""],["eql?","FreeImage::RGBTriple","FreeImage/RGBTriple.html#method-i-eql-3F","(other)",""],["fill_background!","FreeImage::Modify","FreeImage/Modify.html#method-i-fill_background-21","(color, options = 0)","<p>Sets all pixels of an image to the specified color.\n<p>Parameters:\n<p>color &mdash; The color value to be used for filling …\n"],["filters","FreeImage","FreeImage.html#method-i-filters","","<p>FreeImage supports the following rescaling filters:\n"],["find_lib","FreeImage","FreeImage.html#method-c-find_lib","(lib)",""],["flip_horizontal!","FreeImage::Transforms","FreeImage/Transforms.html#method-i-flip_horizontal-21","()","<p>Flip the input image horizontally along the vertical axis.\n"],["flip_vertical!","FreeImage::Transforms","FreeImage/Transforms.html#method-i-flip_vertical-21","()","<p>Flip the input image vertically along the horizontal axis.\n"],["format","FreeImage::File","FreeImage/File.html#method-i-format","()","<p>Returns the image format for a file. If the image format cannot be\ndetermined then will return :unknown. …\n"],["format","FreeImage::IO","FreeImage/IO.html#method-i-format","()","<p>Returns the image format for a memory stream. If the image format cannot be\ndetermined the :unknown will …\n"],["format","FreeImage::Memory","FreeImage/Memory.html#method-i-format","()","<p>Returns the image format for a memory stream. If the image format cannot be\ndetermined the :unknown will …\n"],["formats","FreeImage","FreeImage.html#method-i-formats","","<p>FreeImage supports over 30 bitmap types, which are indentified via symbols.\nSupported formats include: …\n"],["free_image_library_paths","FreeImage","FreeImage.html#method-c-free_image_library_paths","()",""],["from_native","FreeImage::Boolean","FreeImage/Boolean.html#method-c-from_native","(val, ctx)",""],["green_mask","FreeImage::Information","FreeImage/Information.html#method-i-green_mask","()","<p>Returns a bit pattern describing the green color component of a pixel in a\nbitmap.\n"],["has_background_color","FreeImage::Information","FreeImage/Information.html#method-i-has_background_color","()","<p>Returns true when the image has a file background color, false otherwise\n"],["has_pixels","FreeImage::Information","FreeImage/Information.html#method-i-has_pixels","()","<p>Returns true if the bitmap contains pixel data, otherwise false.  Bitmaps\ncan be loaded using the FIF_LOAD_NOPIXELS …\n"],["has_rgb_masks","FreeImage::Information","FreeImage/Information.html#method-i-has_rgb_masks","()",""],["height","FreeImage::Information","FreeImage/Information.html#method-i-height","()","<p>Returns the height of the bitmap in pixel units\n"],["icc_profile","FreeImage::ICC","FreeImage/ICC.html#method-i-icc_profile","()",""],["icc_profile=","FreeImage::ICC","FreeImage/ICC.html#method-i-icc_profile-3D","(value)",""],["icc_supported?","FreeImage::ICC","FreeImage/ICC.html#method-i-icc_supported-3F","()",""],["image_type","FreeImage::Information","FreeImage/Information.html#method-i-image_type","()","<p>Returns the image type of a bitmap.\n"],["image_types","FreeImage","FreeImage.html#method-i-image_types","","<p>FreeImage supports the following image types:\n<p>:unknown &mdash; Unknown format (returned value only, never use …\n"],["info_header","FreeImage::Information","FreeImage/Information.html#method-i-info_header","()",""],["line","FreeImage::Information","FreeImage/Information.html#method-i-line","()","<p>Returns the width of the bitmap in bytes.  See also\nFreeImage::Information.pitch. There has been some …\n"],["little_endian?","FreeImage","FreeImage.html#method-c-little_endian-3F","()","<p>Returns TRUE if the platform running FreeImage uses the Little Endian\nconvention (Intel processors) and …\n"],["make_thumbnail","FreeImage::Modify","FreeImage/Modify.html#method-i-make_thumbnail","(max_pixel_size, convert = true, &block)","<p>Creates a thumbnail image that fits inside a square of size max_pixel_size,\nkeeping the original aspect …\n"],["msvc?","FreeImage","FreeImage.html#method-c-msvc-3F","()",""],["new","FreeImage::Bitmap","FreeImage/Bitmap.html#method-c-new","(ptr, source = nil)",""],["new","FreeImage::Bitmap","FreeImage/Bitmap.html#method-c-new","(ptr, source = nil)","<p>Creates a new image from a c-pointer an image source.  Generally you do not\nwant to use this method. …\n"],["new","FreeImage::Error","FreeImage/Error.html#method-c-new","(format, message)",""],["new","FreeImage::File","FreeImage/File.html#method-c-new","(image_path)","<p>Create a new FreeImage::File instance that can read and write image data\nfrom a file.\n<p>Parameters\n<p>image_path … &mdash; "],["new","FreeImage::IO","FreeImage/IO.html#method-c-new","(io)","<p>Create a new FreeImage::IO instance that can read and write image data from\na Ruby IO stream.\n<p>Parameters …\n"],["new","FreeImage::Memory","FreeImage/Memory.html#method-c-new","(bytes = nil)","<p>Create a new FreeImage::File instance that can read and write image data\nfrom memory.\n<p>Parameters\n<p>bytes … &mdash; "],["new","FreeImage::MemoryStream","FreeImage/MemoryStream.html#method-c-new","(bytes = nil)","<p>Create a new memory stream.\n<p>Parameters\n<p>bytes &mdash; If specified, a binary encoded Ruby string that stores image …\n"],["new","FreeImage::Palette","FreeImage/Palette.html#method-c-new","(bitmap)",""],["new","FreeImage::Scanline","FreeImage/Scanline.html#method-c-new","(bitmap, index, ptr)","<p>Creates a new scanline instance\n<p>Parameters\n<p>bitmap &mdash; An instance of FreeImage::Bitmap\n"],["open","FreeImage::Bitmap","FreeImage/Bitmap.html#method-c-open","(source)","<p>Opens a new image from the specified source.\n<p>Parameters\n<p>source &mdash; The source of the image\n"],["palette","FreeImage::Information","FreeImage/Information.html#method-i-palette","()","<p>Returns a bitmap&#39;s palette. If the bitmap doesn’t have a palette (i.e.\nwhen the pixel bit depth is …\n"],["paste!","FreeImage::Modify","FreeImage/Modify.html#method-i-paste-21","(other, left, top, alpha)","<p>Combines or blends a subpart of another image with the current image.\n<p>Parameters:\n<p>other &mdash; Source subimage …\n"],["pitch","FreeImage::Information","FreeImage/Information.html#method-i-pitch","()","<p>Returns the width of the bitmap in bytes, rounded to the next 32-bit\nboundary, also known as pitch or …\n"],["pixel_color","FreeImage::Pixels","FreeImage/Pixels.html#method-i-pixel_color","(x, y)","<p>Gets the pixel color of a 16-, 24- or 32-bit image at the specified\ncoordinate.\n<p>Parameters\n<p>x &mdash; The pixel …\n"],["pixel_index","FreeImage::Pixels","FreeImage/Pixels.html#method-i-pixel_index","(x, y)","<p>Gets the pixel index of a palettized image at the specified coordinate.\n<p>Parameters\n<p>x &mdash; The pixel position …\n"],["pixelsize","FreeImage::Scanline","FreeImage/Scanline.html#method-i-pixelsize","()","<p>The width of the image in pixels.  Same as FreeImage::Bitmap#width.\n"],["red_mask","FreeImage::Information","FreeImage/Information.html#method-i-red_mask","()","<p>Returns a bit pattern describing the red color component of a pixel in a\nbitmap.\n"],["release","FreeImage::MemoryStream","FreeImage/MemoryStream.html#method-c-release","(ptr)",""],["rescale","FreeImage::Modify","FreeImage/Modify.html#method-i-rescale","(width, height, filter = :bilinear, &block)","<p>Resamples an image to the desired width and height. Resampling changes the\npixel dimensions (and therefore …\n"],["rotate","FreeImage::Transforms","FreeImage/Transforms.html#method-i-rotate","(angle, bk_color = nil, &block)","<p>Rotates an image around the center of the image area by means of 3 shears.\nThe rotated image retains …\n"],["rotate_ex","FreeImage::Transforms","FreeImage/Transforms.html#method-i-rotate_ex","(angle, x_shift, y_shift, x_origin, y_origin, use_mask = false, &block)","<p>Rotates an image using a 3rd order (cubic) B-Spline. The rotated image will\nhave the same width and height …\n"],["save","FreeImage::Bitmap","FreeImage/Bitmap.html#method-i-save","(source, format, flags = 0)","<p>Save the image to the specified source.\n<p>Parameters\n<p>dst &mdash; The destination where the image will be saved.\n"],["save","FreeImage::File","FreeImage/File.html#method-i-save","(bitmap, format, flags = 0)","<p>Saves an image to a file.\n<p>Parameters\n<p>format &mdash; The format to save the image to.\n"],["save","FreeImage::IO","FreeImage/IO.html#method-i-save","(bitmap, format, flags = 0)","<p>Saves an image to a file.\n<p>Parameters\n<p>format &mdash; The format to save the image to.\n"],["save","FreeImage::Memory","FreeImage/Memory.html#method-i-save","(bitmap, format, flags = 0)","<p>Saves an image to memory.\n<p>Parameters\n<p>format &mdash; The format to save the image to.\n"],["scanline","FreeImage::Pixels","FreeImage/Pixels.html#method-i-scanline","(index)","<p>Returns the requested row of image data as a FreeImage::Scanline instance.\n<p>If the bitmap does not contain …\n"],["search_paths","FreeImage","FreeImage.html#method-c-search_paths","()",""],["set_pixel_color","FreeImage::Pixels","FreeImage/Pixels.html#method-i-set_pixel_color","(x, y, color)","<p>Sets the pixel color of a 16-, 24- or 32-bit image at the specified\ncoordinate.\n<p>Parameters\n<p>x &mdash; The pixel …\n"],["set_pixel_index","FreeImage::Pixels","FreeImage/Pixels.html#method-i-set_pixel_index","(x, y, index)","<p>Sets the pixel index of a palettized image at the specified coordinate.\n<p>Parameters\n<p>x &mdash; The pixel position …\n"],["size","FreeImage::Palette","FreeImage/Palette.html#method-i-size","()","<p>Returns the palette-size for palletised bitmaps, and 0 for high-colour\nbitmaps.\n"],["threshold","FreeImage::Conversions","FreeImage/Conversions.html#method-i-threshold","(value, &block)","<p>Converts a bitmap to 1-bit monochrome bitmap using a threshold value\nbetween 0 and 255.  The function …\n"],["to_native","FreeImage::Boolean","FreeImage/Boolean.html#method-c-to_native","(val, ctx)",""],["to_s","FreeImage::RGBQuad","FreeImage/RGBQuad.html#method-i-to_s","()",""],["to_s","FreeImage::RGBTriple","FreeImage/RGBTriple.html#method-i-to_s","()",""],["transparency_count","FreeImage::Information","FreeImage/Information.html#method-i-transparency_count","()","<p>Returns the number of transparent colors in a palletized bitmap, otherwise\nreturns 0.\n"],["transparent","FreeImage::Information","FreeImage/Information.html#method-i-transparent","()","<p>Returns true if the transparency table is enabled (1-, 4- or 8-bit images)\nor when the input dib contains …\n"],["transparent=","FreeImage::Information","FreeImage/Information.html#method-i-transparent-3D","(value)","<p>Tells FreeImage if it should make use of the transparency table or the\nalpha channel that may accompany …\n"],["transparent_index","FreeImage::Information","FreeImage/Information.html#method-i-transparent_index","()","<p>Returns the palette entry used as transparent color for the image\nspecified. Works for palletised images …\n"],["transparent_index=","FreeImage::Information","FreeImage/Information.html#method-i-transparent_index-3D","(value)","<p>Sets the index of the palette entry to be used as transparent color for the\nimage specified. This works …\n"],["version","FreeImage","FreeImage.html#method-c-version","()","<p>Returns the current version of the FreeImage library\n"],["width","FreeImage::Information","FreeImage/Information.html#method-i-width","()","<p>Returns the width of the bitmap in pixel units\n"],["HISTORY","","HISTORY.html","","<p>Release History\n<p>0.6.2 / 2011-09-06 Charlie Savage\n<p>Add null pointer checks when loading images\n"],["LICENSE","","LICENSE.html","","\n<pre>Copyright (c) 2008-2011 Charlie Savage and contributors\nCopyright (c) 2002-2007 Sean Chittenden and contributors ...</pre>\n"],["README","","README_rdoc.html","","<p>FreeImage Ruby Bindings\n<p>Overview\n<p>The free-image gem provides Ruby language bindings for the FreeImage\nlibrary. …\n"],["cookbook","","cookbook_rdoc.html","","<p>Getting Started With FreeImage\n<p>Below are various recipes to get you up and running with FreeImage as\nquickly …\n"]]}}